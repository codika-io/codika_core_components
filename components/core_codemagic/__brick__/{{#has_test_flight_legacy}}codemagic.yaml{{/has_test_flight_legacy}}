definitions:
  server_instance: &server_instance
    # instance_type: mac_mini_m1
    max_build_duration: 60
  env_versions: &env_versions
    java : 17
    flutter: {{flutter_version}}
    xcode: 15.4
    cocoapods: default
  email_build_status: &email_build_status
    email:
      recipients:
        - {{email_address}}
      notify:
        success: true
        failure: true
  android_artifacts: &android_artifacts
    artifacts:
      - build/**/outputs/**/*.aab
      - build/app/outputs/apk/release/app-release.apk
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
  scripts:
    - &version_get_testflight_latest
        name: Get Latest TestFlight Version
        script: |
          # Capture the stdout to a file while also getting the build number
          LATEST_BUILD_NUMBER=$(app-store-connect get-latest-testflight-build-number "$APP_ID" 2>&1 | tee /tmp/testflight_output.txt)
          
          # Read the full output that contains the version
          FULL_OUTPUT=$(cat /tmp/testflight_output.txt)
          
          # Extract the version using grep and sed
          VERSION=$(echo "$FULL_OUTPUT" | grep -o "version [0-9.]*" | sed 's/version //')
          
          # If no version is found, set default version
          if [ -z "$VERSION" ]; then
            echo "No TestFlight version found. Setting default version 0.0.0"
            VERSION="0.0.0"
          else
            echo "Latest TestFlight version: $VERSION"
          fi
          
          # Make the version available to other scripts
          echo "TESTFLIGHT_VERSION=$VERSION" >> $CM_ENV
    - &version_parse_testflight
        name: Parse TestFlight Version Components
        script: |
          # Check if TESTFLIGHT_VERSION is set
          if [ -z "$TESTFLIGHT_VERSION" ]; then
            echo "Error: TESTFLIGHT_VERSION is not set. Make sure get_latest_testflight_version was called first."
            exit 1
          fi

          # Function to validate version format
          validate_version() {
            # Accepts formats: X.Y or X.Y.Z
            if [[ ! $1 =~ ^[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
              echo "Error: Invalid TestFlight version format: $1. Expected format: X.Y[.Z]"
              return 1
            fi
            return 0
          }

          # Validate version format
          if ! validate_version "$TESTFLIGHT_VERSION"; then
            exit 1
          fi

          # Extract major, minor, and patch versions
          TF_MAJOR=$(echo "$TESTFLIGHT_VERSION" | cut -d'.' -f1)
          TF_MINOR=$(echo "$TESTFLIGHT_VERSION" | cut -d'.' -f2)
          
          # For patch, we need to handle both X.Y and X.Y.Z formats
          TF_PATCH=$(echo "$TESTFLIGHT_VERSION" | cut -d'.' -f3)
          if [ -z "$TF_PATCH" ]; then
            TF_PATCH="0"  # Default to 0 if no patch version is present
          fi

          # Validate that we got numbers
          if ! [[ "$TF_MAJOR" =~ ^[0-9]+$ ]] || ! [[ "$TF_MINOR" =~ ^[0-9]+$ ]] || ! [[ "$TF_PATCH" =~ ^[0-9]+$ ]]; then
            echo "Error: Failed to extract valid version numbers from TestFlight version"
            exit 1
          fi

          echo "TestFlight version: $TESTFLIGHT_VERSION"
          echo "Major version: $TF_MAJOR"
          echo "Minor version: $TF_MINOR"
          echo "Patch version: $TF_PATCH"

          # Export to environment variables
          echo "TESTFLIGHT_VERSION_MAJOR=$TF_MAJOR" >> $CM_ENV
          echo "TESTFLIGHT_VERSION_MINOR=$TF_MINOR" >> $CM_ENV
          echo "TESTFLIGHT_VERSION_PATCH=$TF_PATCH" >> $CM_ENV
    - &version_get_pubspec
        name: Get Version from Pubspec
        script: |
          # Function to validate version format
          validate_version() {
            # Accepts formats: X.Y or X.Y.Z or X.Y.Z+B
            if [[ ! $1 =~ ^[0-9]+\.[0-9]+(\.[0-9]+)?(\+[0-9]+)?$ ]]; then
              echo "Error: Invalid version format in pubspec.yaml. Expected format: X.Y[.Z][+B]"
              return 1
            fi
            return 0
          }

          # Read the version line from pubspec.yaml
          VERSION_LINE=$(grep "^version:" "$CM_BUILD_DIR/pubspec.yaml" || echo "")

          if [ -z "$VERSION_LINE" ]; then
            echo "Error: Version line not found in pubspec.yaml"
            exit 1
          fi

          # Extract the version string (removes "version:" and whitespace)
          VERSION=$(echo "$VERSION_LINE" | sed 's/^version:[[:space:]]*//')

          # Validate version format
          if ! validate_version "$VERSION"; then
            exit 1
          fi

          # Extract major and minor versions (now simpler since we only care about first two numbers)
          MAJOR=$(echo "$VERSION" | cut -d'.' -f1)
          MINOR=$(echo "$VERSION" | cut -d'.' -f2)

          # Validate that we got numbers
          if ! [[ "$MAJOR" =~ ^[0-9]+$ ]] || ! [[ "$MINOR" =~ ^[0-9]+$ ]]; then
            echo "Error: Failed to extract valid major/minor version numbers"
            exit 1
          fi

          echo "Extracted version: $VERSION"
          echo "Major version: $MAJOR"
          echo "Minor version: $MINOR"

          # Export to environment variables
          echo "PUBSPEC_VERSION_MAJOR=$MAJOR" >> $CM_ENV
          echo "PUBSPEC_VERSION_MINOR=$MINOR" >> $CM_ENV
    - &version_determine_next
        name: Determine Next Version Numbers
        script: |
          # Check if all required variables are set
          REQUIRED_VARS=(
            "PUBSPEC_VERSION_MAJOR" 
            "PUBSPEC_VERSION_MINOR" 
            "TESTFLIGHT_VERSION_MAJOR" 
            "TESTFLIGHT_VERSION_MINOR"
            "TESTFLIGHT_VERSION_PATCH"
          )
          
          for VAR in "${REQUIRED_VARS[@]}"; do
            if [ -z "${!VAR}" ]; then
              echo "Error: $VAR is not set. Make sure both version parsing scripts were executed first."
              exit 1
            fi
          done

          echo "Current Versions"
          echo "Pubspec:    $PUBSPEC_VERSION_MAJOR.$PUBSPEC_VERSION_MINOR"
          echo "TestFlight: $TESTFLIGHT_VERSION_MAJOR.$TESTFLIGHT_VERSION_MINOR.$TESTFLIGHT_VERSION_PATCH"

          # Compare major versions
          if [ "$PUBSPEC_VERSION_MAJOR" -lt "$TESTFLIGHT_VERSION_MAJOR" ]; then
            echo "Error: Pubspec major version ($PUBSPEC_VERSION_MAJOR) is lower than TestFlight major version ($TESTFLIGHT_VERSION_MAJOR)"
            exit 1
          fi

          # If major versions are equal, compare minor versions
          if [ "$PUBSPEC_VERSION_MAJOR" -eq "$TESTFLIGHT_VERSION_MAJOR" ] && 
            [ "$PUBSPEC_VERSION_MINOR" -lt "$TESTFLIGHT_VERSION_MINOR" ]; then
            echo "Error: Pubspec minor version ($PUBSPEC_VERSION_MAJOR.$PUBSPEC_VERSION_MINOR) is lower than TestFlight version ($TESTFLIGHT_VERSION_MAJOR.$TESTFLIGHT_VERSION_MINOR)"
            exit 1
          fi

          # Set next major and minor from pubspec
          NEXT_VERSION_MAJOR=$PUBSPEC_VERSION_MAJOR
          NEXT_VERSION_MINOR=$PUBSPEC_VERSION_MINOR

          # Determine next patch version
          if [ "$PUBSPEC_VERSION_MAJOR" -gt "$TESTFLIGHT_VERSION_MAJOR" ] || 
            ([ "$PUBSPEC_VERSION_MAJOR" -eq "$TESTFLIGHT_VERSION_MAJOR" ] && 
              [ "$PUBSPEC_VERSION_MINOR" -gt "$TESTFLIGHT_VERSION_MINOR" ]); then
            # If pubspec version is higher, start patch from 0
            NEXT_VERSION_PATCH=0
          else
            # If versions are equal, increment patch
            NEXT_VERSION_PATCH=$((TESTFLIGHT_VERSION_PATCH + 1))
          fi

          echo "Next version will be: $NEXT_VERSION_MAJOR.$NEXT_VERSION_MINOR.$NEXT_VERSION_PATCH"

          # Export to environment variables
          echo "NEXT_VERSION_MAJOR=$NEXT_VERSION_MAJOR" >> $CM_ENV
          echo "NEXT_VERSION_MINOR=$NEXT_VERSION_MINOR" >> $CM_ENV
          echo "NEXT_VERSION_PATCH=$NEXT_VERSION_PATCH" >> $CM_ENV 
    - &version_get_testflight_build
        name: Get Latest TestFlight Build Number
        script: |
          # Debugging: Print the APP_ID and BUILD_NUMBER
          echo "APP_ID: $APP_ID"
          echo "BUILD_NUMBER: $BUILD_NUMBER"

          # Attempt to get the latest build version from App Store Connect
          TESTFLIGHT_BUILD_NUMBER_OUTPUT=$(app-store-connect get-latest-testflight-build-number "$APP_ID")

          echo "TESTFLIGHT_BUILD_NUMBER_OUTPUT: $TESTFLIGHT_BUILD_NUMBER_OUTPUT"

          # Check if the latest build version was retrieved successfully
          if [ -z "$TESTFLIGHT_BUILD_NUMBER_OUTPUT" ]; then
            # Fallback in case no build version was found at App Store Connect
            # Subtract 1 since build_ios_prod will increment it
            EFFECTIVE_BUILD_NUMBER=$(($BUILD_NUMBER - 1))
            echo "No build version found at App Store Connect. Using build number $EFFECTIVE_BUILD_NUMBER"
          else
            EFFECTIVE_BUILD_NUMBER=$TESTFLIGHT_BUILD_NUMBER_OUTPUT
            echo "Latest build version found at App Store Connect: $EFFECTIVE_BUILD_NUMBER"
          fi

          # Debugging: Print the EFFECTIVE_BUILD_NUMBER
          echo "EFFECTIVE_BUILD_NUMBER: $EFFECTIVE_BUILD_NUMBER"
          export TESTFLIGHT_BUILD_NUMBER="$EFFECTIVE_BUILD_NUMBER"

          # Make the build number available to other scripts
          echo "TESTFLIGHT_BUILD_NUMBER=$EFFECTIVE_BUILD_NUMBER" >> $CM_ENV  
    - &tools_install_flutterfire
        name: Install FlutterFire CLI
        script: dart pub global activate flutterfire_cli
    - &tools_verify_flutterfire
        name: Verify FlutterFire CLI
        script: | 
          if which flutterfire > /dev/null; then
            echo "FlutterFire CLI is available"
            flutterfire --version
          else
            echo "FlutterFire CLI is not available"
            echo "PATH is: $PATH"
            echo "Contents of ~/.pub-cache/bin:"
            ls -l ~/.pub-cache/bin || echo "Directory not found"
          fi
    - &tools_install_shorebird
        name: Install Shorebird CLI
        script: |
          # Install the Shorebird CLI
          curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash
          
          # Add Shorebird to PATH
          echo PATH="/Users/builder/.shorebird/bin:$PATH" >> $CM_ENV
    - &config_copy_files
        name: Copy Configuration Files
        script: |
          # Create all necessary directories first
          echo "Creating required directories..."
          mkdir -p "$FCI_BUILD_DIR/.codika/config/$ENV"
          mkdir -p "$FCI_BUILD_DIR/lib"
          mkdir -p "$FCI_BUILD_DIR/ios/flavors/$ENV"
          mkdir -p "$FCI_BUILD_DIR/android/app/src/$ENV"
          mkdir -p "$FCI_BUILD_DIR/macos/flavors/$ENV"
          
          # Environment Keys
          if [ -z "$ENV_VARS_KEYS" ]; then
            echo "ERROR: ENV_VARS_KEYS is not set."
          else
            echo $ENV_VARS_KEYS | base64 --decode > "$FCI_BUILD_DIR/.codika/config/$ENV/.env"
            echo " - Environment Keys File Copied at $FCI_BUILD_DIR/.codika/config/$ENV/.env"
          fi

          # Firebase Options
          if [ -z "$FIREBASE_OPTIONS" ]; then
            echo "ERROR: FIREBASE_OPTIONS is not set."
          else
            echo $FIREBASE_OPTIONS | base64 --decode > "$FCI_BUILD_DIR/lib/firebase_options_$ENV.dart"
            echo " - Firebase Config File Copied"
          fi

          # iOS
          if [ -z "$GOOGLE_SERVICE_IOS" ]; then
            echo "ERROR: GOOGLE_SERVICE_IOS is not set."
          else
            echo $GOOGLE_SERVICE_IOS | base64 --decode > "$FCI_BUILD_DIR/ios/flavors/$ENV/GoogleService-Info.plist"
            echo " - Google Service Config File Copied"
          fi

          # Android
          if [ -z "$GOOGLE_SERVICE_ANDROID" ]; then
            echo "ERROR: GOOGLE_SERVICE_ANDROID is not set."
          else
            echo $GOOGLE_SERVICE_ANDROID | base64 --decode > "$FCI_BUILD_DIR/android/app/src/$ENV/google-services.json"
            echo " - Android Config File Copied"
          fi

          # MacOS
          if [ -z "$GOOGLE_SERVICE_MACOS" ]; then
            echo "ERROR: GOOGLE_SERVICE_MACOS is not set."
          else
            echo $GOOGLE_SERVICE_MACOS | base64 --decode > "$FCI_BUILD_DIR/macos/flavors/$ENV/GoogleService-Info.plist"
            echo " - MacOS Config File Copied"
          fi

          echo PATH="/Users/builder/.shorebird/bin:$PATH" >> $CM_ENV
    - &signing_init_keychain
        name: Initialize Keychain
        script: keychain initialize
    - &signing_fetch_files
        name: Fetch Signing Files
        script: | 
          app-store-connect fetch-signing-files "$(xcode-project detect-bundle-id)" \
          --type IOS_APP_STORE \
          --create
    - &signing_add_certificates
        name: Add Certificates to Keychain
        script: keychain add-certificates
    - &signing_setup_xcode
        name: Configure Xcode Signing
        script: xcode-project use-profiles
    - &deps_get_flutter
        name: Get Flutter Dependencies
        script: | 
          flutter pub get
    - &deps_install_pods
        name: Install CocoaPods Dependencies
        script: | 
          find . -name "Podfile" -execdir pod install \;
    - &deps_setup_local_properties
        name: Setup Android Local Properties
        script: | 
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
    - &font_build_awesome
        name: Build Font Awesome Icons
        script: | 
          # Store the current directory
          ORIGINAL_DIR=$(pwd)

          # Define the directory to check
          DIR="cloned/font_awesome_flutter/"

          # Check if the directory exists
          if [ -d "$DIR" ]; then
            # Log that the directory exists
            echo "Directory $DIR exists."

            # Change to the directory
            cd "$DIR"

            # Log that we are running flutter pub get
            echo "Running 'flutter pub get' in $DIR"

            # Run flutter pub get
            flutter pub get

            # Log that flutter pub get has completed
            echo "'flutter pub get' has completed in $DIR"

            # Navigate back to the original directory
            cd "$ORIGINAL_DIR"

            # Log that we are back to the original directory
            echo "Returned to the original directory $ORIGINAL_DIR"
          else
            # Log that the directory does not exist
            echo "Directory $DIR does not exist."
          fi
    - &ios_build
        name: Build iOS IPA
        script: |
          # Check if required version variables are set
          REQUIRED_VARS=(
            "NEXT_VERSION_MAJOR"
            "NEXT_VERSION_MINOR"
            "NEXT_VERSION_PATCH"
            "TESTFLIGHT_BUILD_NUMBER"
          )
          
          for VAR in "${REQUIRED_VARS[@]}"; do
            if [ -z "${!VAR}" ]; then
              echo "Error: $VAR is not set. Make sure version determination scripts were executed first."
              exit 1
            fi
          done

          # Increment the build number
          NEXT_BUILD_NUMBER=$(($TESTFLIGHT_BUILD_NUMBER + 1))
          echo "Using incremented build number: $NEXT_BUILD_NUMBER"

          # Build the Flutter app with semantic versioning
          shorebird release ios --flavor $ENV --flutter-version={{flutter_version}} -- \
            -t lib/main_${ENV}.dart \
            --flavor $ENV \
            --build-name=$NEXT_VERSION_MAJOR.$NEXT_VERSION_MINOR.$NEXT_VERSION_PATCH \
            --build-number=$NEXT_BUILD_NUMBER \
            --export-options-plist=/Users/builder/export_options.plist \
            --dart-define-from-file=.codika/config/$ENV/.env

          # Capture the exit status of the flutter build command
          FLUTTER_BUILD_STATUS=$?

          if [ $FLUTTER_BUILD_STATUS -ne 0 ]; then
            echo "Flutter build failed with exit status $FLUTTER_BUILD_STATUS"
            exit $FLUTTER_BUILD_STATUS
          else
            echo "Flutter build succeeded"
          fi
    - &ios_patch
        name: Patch iOS IPA
        script: |
          # Check if required version variables are set
          REQUIRED_VARS=(
            "NEXT_VERSION_MAJOR"
            "NEXT_VERSION_MINOR"
            "NEXT_VERSION_PATCH"
            "TESTFLIGHT_BUILD_NUMBER"
          )
          
          for VAR in "${REQUIRED_VARS[@]}"; do
            if [ -z "${!VAR}" ]; then
              echo "Error: $VAR is not set. Make sure version determination scripts were executed first."
              exit 1
            fi
          done

          # Construct release version using NEXT version numbers instead of TESTFLIGHT
          RELEASE_VERSION="$NEXT_VERSION_MAJOR.$NEXT_VERSION_MINOR.$NEXT_VERSION_PATCH+$((TESTFLIGHT_BUILD_NUMBER + 1))"
          echo "Using release version: $RELEASE_VERSION"
          
          # Patch the Flutter app
          shorebird patch ios --flavor $ENV \
            -t lib/main_${ENV}.dart \
            --flavor $ENV \
            --release-version "$RELEASE_VERSION" \
            --allow-asset-diffs -- \
            --export-options-plist=/Users/builder/export_options.plist
    - &android_build_aab_prod
        name: Build Android Production Bundle
        script: |
          echo "Fetching latest build version from Google Play Store"
          LATEST_GOOGLE_PLAY_STORE_BUILD_VERSION=$(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks="$GOOGLE_PLAY_TRACK")
          if [ -z $LATEST_GOOGLE_PLAY_STORE_BUILD_VERSION ]
            then
              # Fallback in case no build version was found at Firebase.
              # BUILD_NUMBER is a Codemagic built-in variable tracking the number of
              # times this workflow has been built
              UPDATED_BUILD_VERSION=$BUILD_NUMBER
              echo "No build version found at Google Play Store. Using build number $UPDATED_BUILD_VERSION"
            else
              UPDATED_BUILD_VERSION=$(($LATEST_GOOGLE_PLAY_STORE_BUILD_VERSION + 1))
              echo "Latest build version found at Google Play Store: $LATEST_GOOGLE_PLAY_STORE_BUILD_VERSION. Using build number $UPDATED_BUILD_VERSION"
          fi
          flutter build appbundle --release \
            --build-name=1.0.$UPDATED_BUILD_VERSION \
            --build-number=$UPDATED_BUILD_VERSION \
            --dart-define-from-file=.codika/config/.env
    - &android_build_apk_prod
        name: Build Android Production APK
        script: | 
          echo "Fetching latest build version from Google Play Store"
          LATEST_GOOGLE_PLAY_STORE_BUILD_VERSION=$(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks="$GOOGLE_PLAY_TRACK")
          if [ -z $LATEST_GOOGLE_PLAY_STORE_BUILD_VERSION ]
            then
              # Fallback in case no build version was found at Firebase.
              # BUILD_NUMBER is a Codemagic built-in variable tracking the number of
              # times this workflow has been built
              UPDATED_BUILD_VERSION=$BUILD_NUMBER
              echo "No build version found at Google Play Store. Using build number $UPDATED_BUILD_VERSION"
            else
              UPDATED_BUILD_VERSION=$(($LATEST_GOOGLE_PLAY_STORE_BUILD_VERSION + 1))
              echo "Latest build version found at Google Play Store: $LATEST_GOOGLE_PLAY_STORE_BUILD_VERSION. Using build number $UPDATED_BUILD_VERSION"
          fi
          flutter build apk --release \
            --build-name=1.0.$UPDATED_BUILD_VERSION \
            --build-number=$UPDATED_BUILD_VERSION \
            --dart-define-from-file=.codika/config/.env
    - &crash_upload_dsym
        name: Upload dSYM to Crashlytics
        script: | 
          echo "Starting dSYM upload process..."
          
          # Check if Pods directory exists
          if [ ! -d "ios/Pods" ]; then
            echo "Error: ios/Pods directory not found. Make sure CocoaPods is properly installed."
            exit 1
          fi
          
          # Check if upload-symbols exists
          UPLOAD_SYMBOLS_PATH="$CM_BUILD_DIR/ios/Pods/FirebaseCrashlytics/upload-symbols"
          if [ ! -f "$UPLOAD_SYMBOLS_PATH" ]; then
            echo "Error: upload-symbols tool not found at $UPLOAD_SYMBOLS_PATH"
            echo "Contents of ios/Pods/FirebaseCrashlytics:"
            ls -la ios/Pods/FirebaseCrashlytics
            exit 1
          fi
          
          # Check if GoogleService-Info.plist exists in the new location
          if [ ! -f "ios/flavors/$ENV/GoogleService-Info.plist" ]; then
            echo "Error: GoogleService-Info.plist not found in ios/flavors/$ENV/"
            exit 1
          fi
          
          echo "Searching for dSYM files in archive..."
          # Look in multiple possible locations
          DSYM_PATHS=(
            "$CM_BUILD_DIR/build/ios/archive/Runner.xcarchive/dSYMs"
            "$CM_BUILD_DIR/build/ios/archive/Runner.xcarchive"
            "$HOME/Library/Developer/Xcode/DerivedData/**/Build/**"
          )
          
          FOUND_DSYM=false
          for SEARCH_PATH in "${DSYM_PATHS[@]}"; do
            echo "Looking for dSYMs in: $SEARCH_PATH"
            DSYMS=$(find "$SEARCH_PATH" -name "*.dSYM" 2>/dev/null)
            if [ ! -z "$DSYMS" ]; then
              echo "Found dSYM files:"
              echo "$DSYMS"
              FOUND_DSYM=true
              
              echo "Attempting to upload each dSYM file..."
              while IFS= read -r dsymPath; do
                echo "Uploading dSYM: $dsymPath"
                "$UPLOAD_SYMBOLS_PATH" \
                  -gsp ios/flavors/$ENV/GoogleService-Info.plist \
                  -p ios \
                  "$dsymPath"
                
                UPLOAD_RESULT=$?
                if [ $UPLOAD_RESULT -eq 0 ]; then
                  echo "Successfully uploaded dSYM: $dsymPath"
                else
                  echo "Failed to upload dSYM: $dsymPath (Exit code: $UPLOAD_RESULT)"
                fi
              done <<< "$DSYMS"
            fi
          done
          
          if [ "$FOUND_DSYM" = false ]; then
            echo "Error: No dSYM files were found in any of the search locations"
            echo "Build directory contents:"
            ls -R build/ios/
            exit 1
          fi
workflows:
  {{#has_prod_env}}
  ios-prod:
    name: Prod iOS (build)
    <<: *server_instance
    integrations:
      app_store_connect: {{app_store_connect_key_codemagic_name}}
    environment:
      <<: *env_versions
      ios_signing:
        certificates:
          - {{codemagic_certificate_name}}
        provisioning_profiles:
          - {{codemagic_provisioning_profile_name_prod}}
      vars:
        APP_ID: {{app_id_ios_prod}}
        ENV: prod
      groups:
        - config_vars_prod
        - code_signing
        - shorebird
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'prod'
          include: true
          source: true
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/Library/Caches/CocoaPods
    scripts:
      - *version_get_testflight_latest
      - *version_parse_testflight
      - *version_get_pubspec
      - *version_determine_next
      - *version_get_testflight_build
      - *tools_install_flutterfire
      - *tools_install_shorebird
      - *config_copy_files
      - *signing_init_keychain
      - *signing_add_certificates
      - *signing_setup_xcode
      - *deps_get_flutter
      - *deps_install_pods
      - *font_build_awesome
      - *ios_build
      - *crash_upload_dsym
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      - build/ios/archive/Runner.xcarchive/dSYMs/*.dSYM
    publishing:
      << : *email_build_status
      app_store_connect:
        auth: integration
        submit_to_app_store: true
        submit_to_testflight: true
        expire_build_submitted_for_review: true
        cancel_previous_submissions: true
        release_type: MANUAL
        copyright: {{ios_copyright}}
  ios-prod-patch:
    name: Prod iOS (patch)
    <<: *server_instance
    integrations:
      app_store_connect: {{app_store_connect_key_codemagic_name}}
    environment:
      <<: *env_versions
      ios_signing:
        certificates:
          - {{codemagic_certificate_name}}
        provisioning_profiles:
          - {{codemagic_provisioning_profile_name_prod}}
      vars:
        APP_ID: {{app_id_ios_prod}}
        ENV: prod
      groups:
        - config_vars_prod
        - code_signing
        - shorebird
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'prod-patch'
          include: true
          source: true
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/Library/Caches/CocoaPods
    scripts:
      - *version_get_testflight_latest
      - *version_parse_testflight
      - *version_get_pubspec
      - *version_determine_next
      - *version_get_testflight_build
      - *tools_install_flutterfire
      - *tools_verify_flutterfire
      - *tools_install_shorebird
      - *config_copy_files
      - *signing_init_keychain
      - *signing_add_certificates
      - *signing_setup_xcode
      - *deps_get_flutter
      - *deps_install_pods
      - *font_build_awesome
      - *ios_patch
  {{/has_prod_env}}
  {{#has_test_env}}
  ios-test:
    name: Test iOS (build)
    <<: *server_instance
    integrations:
      app_store_connect: {{app_store_connect_key_codemagic_name}}
    environment:
      <<: *env_versions
      ios_signing:
        certificates:
          - {{codemagic_certificate_name}}
        provisioning_profiles:
          - {{codemagic_provisioning_profile_name_prod}}
      vars:
        APP_ID: {{app_id_ios_test}}
        ENV: test
      groups:
        - config_vars_test
        - code_signing
        - shorebird
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'test'
          include: true
          source: true
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/Library/Caches/CocoaPods
    scripts:
      - *version_get_testflight_latest
      - *version_parse_testflight
      - *version_get_pubspec
      - *version_determine_next
      - *version_get_testflight_build
      - *tools_install_flutterfire
      - *tools_install_shorebird
      - *config_copy_files
      - *signing_init_keychain
      - *signing_add_certificates
      - *signing_setup_xcode
      - *deps_get_flutter
      - *deps_install_pods
      - *font_build_awesome
      - *ios_build
      - *crash_upload_dsym
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      - build/ios/archive/Runner.xcarchive/dSYMs/*.dSYM
    publishing:
      << : *email_build_status
      app_store_connect:
        auth: integration
        submit_to_app_store: true
        submit_to_testflight: true
        expire_build_submitted_for_review: true
        cancel_previous_submissions: true
        release_type: MANUAL
        copyright: {{ios_copyright}}
  ios-test-patch:
    name: Test iOS (patch)
    <<: *server_instance
    integrations:
      app_store_connect: {{app_store_connect_key_codemagic_name}}
    environment:
      <<: *env_versions
      ios_signing:
        certificates:
          - {{codemagic_certificate_name}}
        provisioning_profiles:
          - {{codemagic_provisioning_profile_name_test}}
      vars:
        APP_ID: {{app_id_ios_test}}
        ENV: test
      groups:
        - config_vars_test
        - code_signing
        - shorebird
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'test-patch'
          include: true
          source: true
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/Library/Caches/CocoaPods
    scripts:
      - *version_get_testflight_latest
      - *version_parse_testflight
      - *version_get_pubspec
      - *version_determine_next
      - *version_get_testflight_build
      - *tools_install_flutterfire
      - *tools_verify_flutterfire
      - *tools_install_shorebird
      - *config_copy_files
      - *signing_init_keychain
      - *signing_add_certificates
      - *signing_setup_xcode
      - *deps_get_flutter
      - *deps_install_pods
      - *font_build_awesome
      - *ios_patch
  {{/has_test_env}}
  {{#has_stag_env}}
  ios-stag:
    name: Staging iOS (build)
    <<: *server_instance
    integrations:
      app_store_connect: {{app_store_connect_key_codemagic_name}}
    environment:
      <<: *env_versions
      ios_signing:
        certificates:
          - {{codemagic_certificate_name}}
        provisioning_profiles:
          - {{codemagic_provisioning_profile_name_stag}}
      vars:
        APP_ID: {{app_id_ios_stag}}
        ENV: stag
      groups:
        - config_vars_stag
        - code_signing
        - shorebird
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'stag'
          include: true
          source: true
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/Library/Caches/CocoaPods
    scripts:
      - *version_get_testflight_latest
      - *version_parse_testflight
      - *version_get_pubspec
      - *version_determine_next
      - *version_get_testflight_build
      - *tools_install_flutterfire
      - *tools_install_shorebird
      - *config_copy_files
      - *signing_init_keychain
      - *signing_add_certificates
      - *signing_setup_xcode
      - *deps_get_flutter
      - *deps_install_pods
      - *font_build_awesome
      - *ios_build
      - *crash_upload_dsym
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      - build/ios/archive/Runner.xcarchive/dSYMs/*.dSYM
    publishing:
      << : *email_build_status
      app_store_connect:
        auth: integration
        submit_to_app_store: true
        submit_to_testflight: true
        expire_build_submitted_for_review: true
        cancel_previous_submissions: true
        release_type: MANUAL
        copyright: {{ios_copyright}}
  ios-stag-patch:
    name: Staging iOS (patch)
    <<: *server_instance
    integrations:
      app_store_connect: {{app_store_connect_key_codemagic_name}}
    environment:
      <<: *env_versions
      ios_signing:
        certificates:
          - {{codemagic_certificate_name}}
        provisioning_profiles:
          - {{codemagic_provisioning_profile_name_stag}}
      vars:
        APP_ID: {{app_id_ios_stag}}
        ENV: stag
      groups:
        - config_vars_stag
        - code_signing
        - shorebird
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'stag-patch'
          include: true
          source: true
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/Library/Caches/CocoaPods
    scripts:
      - *version_get_testflight_latest
      - *version_parse_testflight
      - *version_get_pubspec
      - *version_determine_next
      - *version_get_testflight_build
      - *tools_install_flutterfire
      - *tools_verify_flutterfire
      - *tools_install_shorebird
      - *config_copy_files
      - *signing_init_keychain
      - *signing_add_certificates
      - *signing_setup_xcode
      - *deps_get_flutter
      - *deps_install_pods
      - *font_build_awesome
      - *ios_patch
  {{/has_stag_env}}
  # android-prod:
  #   name: Prod Android
  #   instance_type: mac_mini_m1
  #   max_build_duration: 60
  #   environment:
  #     java : 17
  #     flutter: stable
  #     xcode: latest
  #     android_signing:
  #       - {{android_signing_key_codemagic_name}}
  #     groups:
  #       - config_vars_prod
  #       - google_credentials
  #     vars:
  #       GOOGLE_PLAY_TRACK: internal
  #   triggering:
  #     events:
  #       - push
  #     branch_patterns:
  #       - pattern: 'prod'
  #         include: true
  #         source: true
  #   cache:
  #     cache_paths:
  #       - $FLUTTER_ROOT/.pub-cache
  #       - $HOME/.gradle/caches
  #   scripts:
  #     - *copying_config_files_prod
  #     - *setup_local_properties
  #     - *get_flutter_packages
  #     - *build_font_awesome_icons
  #     - *build_aab_prod
  #     # - *build_apk_prod
  #   << : *android_artifacts
  #   publishing:
  #     << : *email_build_status
  #     google_play:
  #       credentials: $GOOGLE_PLAY_SERVICE_ACCOUNT
  #       track: $GOOGLE_PLAY_TRACK
  #       submit_as_draft: true